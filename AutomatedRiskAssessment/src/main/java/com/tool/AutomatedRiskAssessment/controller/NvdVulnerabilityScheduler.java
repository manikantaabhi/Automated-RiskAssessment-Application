package com.tool.AutomatedRiskAssessment.controller;
/* This class is used as a service for job scheduler, when DatabaseBackedScheduler finds jobs it pics up that job and
 * sends request to this service. This service takes users specific product info and takes the unique product values and 
 * checks in NVD database for all those products. If the last modified date is different then it means it is a new vulnerability
 * update for that speficific product and this saved in userVulnerability table  */
import java.net.URLEncoder;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import com.tool.AutomatedRiskAssessment.dto.VulnerabilityDataResponse;
import com.tool.AutomatedRiskAssessment.model.OrganizationProducts;
import com.tool.AutomatedRiskAssessment.model.Product;
import com.tool.AutomatedRiskAssessment.model.UserVulnerability;
import com.tool.AutomatedRiskAssessment.model.Vulnerability;
import com.tool.AutomatedRiskAssessment.repo.OrganizationProductsReposotory;
import com.tool.AutomatedRiskAssessment.repo.ProductRepository;
import com.tool.AutomatedRiskAssessment.repo.UserRepository;
import com.tool.AutomatedRiskAssessment.repo.UserVulnerabilityRepository;
import com.tool.AutomatedRiskAssessment.repo.VulnerabilityRepository;

@Component
public class NvdVulnerabilityScheduler {

    @Autowired
    private OrganizationProductsReposotory organizationProductsReposotory;

    @Autowired
    private VulnerabilityRepository vulnerabilityRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private UserVulnerabilityRepository userVulnerabilityRepository;


    private final RestTemplate restTemplate = new RestTemplate();

    private static final String NVD_API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0";

//    public void checkForUpdatedVulnerabilities() {
//    	System.out.println("Trying to chek if there are any new...");
//        List<OrganizationProducts> uniqueProducts = organizationProductsReposotory.findAll();
//        
//        Set<String> uniqueVendorProductPairs = uniqueProducts.stream()
//        	    .map(p->p.getVendor()+":"+p.getProduct()+":"+p.getVersion()+":"+p.getUserName())
//        	    .collect(Collectors.toSet());
//        
//        for (String entry : uniqueVendorProductPairs) {
//            String company = entry.split(":")[0];
//            String product = entry.split(":")[1];
//            String version = entry.split(":")[2];
//            String userName = entry.split(":")[3];
//            if(version.isBlank()||version.equals("*")||version.isEmpty())
//            	version="0";
//            
//        	String cpeName = String.format("cpe:2.3:o:%s:%s:%s:*:*:*:*:*:*:*", company, product, version);
//            String keywords = "";
//            
//            
//            String url = NVD_API_URL.concat("?cpeName=").concat(cpeName).concat("&keywordSearch=").concat(keywords);
//            
//            Map<String, Object> response = restTemplate.getForObject(url, Map.class);
//            
//            
//            //System.out.println(response);
//            
//            List<Map<String, Object>> cveItems = (List<Map<String, Object>>) response.get("vulnerabilities");
//            
//            for (Map<String, Object> cveItem : cveItems) {
//
//                Map<String, Object> cveData = (Map<String, Object>) cveItem.get("cve");
//                String cveId = (String) cveData.get("id");
//                String lastMod = (String) cveData.get("lastModified");
//                Optional<Vulnerability> x = vulnerabilityRepository.findByCveId(cveId);
//                //System.out.println("Vul in our databse: "+x);
//                //System.out.println("Last Mod in NVD:"+lastMod);
//                
//                if (x.isPresent() && !x.get().getLastModified().equals(lastMod)) {
//                    boolean exists = userVulnerabilityRepository.existsByUsernameAndCveId(userName, cveId);
//                    if (!exists) {
//                        UserVulnerability uv = new UserVulnerability(userName, cveId);
//                        userVulnerabilityRepository.save(uv);
//                    }
//                }
//            }
//
//        try {
//			Thread.sleep(500);
//		} catch (InterruptedException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//        }
//        System.out.println("done checking for new");
//    }

    private List<Vulnerability> parseNvdResponse(String json) {
        // Use ObjectMapper or JSON parser to extract CVE ID, lastModified, etc.
        return new ArrayList<>();
    }
    
    public void checkVulnerabilitiesForUser(String userName) {
        List<OrganizationProducts> userProducts = organizationProductsReposotory.findByUsername(userName);

        Set<String> uniqueVendorProductPairs = userProducts.stream()
            .map(p -> p.getVendor() + ":" + p.getProduct() + ":" + p.getVersion())
            .collect(Collectors.toSet());

        for (String entry : uniqueVendorProductPairs) {
            String[] parts = entry.split(":");
            String company = parts[0];
            String product = parts[1];
            String version = parts[2];

            if (version == null || version.isBlank() || version.equals("*")) version = "0";

            String cpeName = String.format("cpe:2.3:o:%s:%s:%s:*:*:*:*:*:*:*", company, product, version);
            String url = NVD_API_URL.concat("?cpeName=").concat(cpeName);

            Map<String, Object> response = restTemplate.getForObject(url, Map.class);
            List<Map<String, Object>> cveItems = (List<Map<String, Object>>) response.get("vulnerabilities");

            for (Map<String, Object> cveItem : cveItems) {
                Map<String, Object> cveData = (Map<String, Object>) cveItem.get("cve");
                String cveId = (String) cveData.get("id");
                String lastMod = (String) cveData.get("lastModified");

                Optional<Vulnerability> x = vulnerabilityRepository.findByCveId(cveId);
                if (x.isPresent() && !x.get().getLastModified().equals(lastMod)) {
                    boolean exists = userVulnerabilityRepository.existsByUsernameAndCveId(userName, cveId);
                    if (!exists) {
                        userVulnerabilityRepository.save(new UserVulnerability(userName, cveId, false));
                    }
                }
            }
        }
    }

}
