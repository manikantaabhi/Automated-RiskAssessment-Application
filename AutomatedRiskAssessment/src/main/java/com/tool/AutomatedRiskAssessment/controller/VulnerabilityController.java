package com.tool.AutomatedRiskAssessment.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import com.tool.AutomatedRiskAssessment.dto.VulnerabilityDataResponse;
import com.tool.AutomatedRiskAssessment.dto.VulnerabilitySaveRequestDTO;
import com.tool.AutomatedRiskAssessment.model.*;
import com.tool.AutomatedRiskAssessment.repo.*;
import com.tool.AutomatedRiskAssessment.service.CheckVulnerabilityService;

import java.util.*;
import java.util.stream.Collectors;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/vulnerabilities")
public class VulnerabilityController {
    
    @Autowired
    private CheckVulnerabilityService checkVulnerabilityService;
    
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private VulnerabilityRepository vulnerabilityRepository;
    
    @Autowired
    private UserVulnerabilityHistoryRepository userVulnerabilityHistoryRepository;

    @PostMapping("/save-vulnerabilities")
    public ResponseEntity<Map<String, String>> saveVulnerabilities(@RequestBody VulnerabilitySaveRequestDTO request) {
        System.out.println(request);
        String username = request.getUsername();
        
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new IllegalArgumentException("User not found"));

        List<String> cveIds = request.getCveId();
        List<UserVulnerabilityHistory> historyRecords = new ArrayList<>();

        for (String cveId : cveIds) {
            Optional<Vulnerability> existingVulnerability = vulnerabilityRepository.findByCveId(cveId);
            
            if (existingVulnerability.isPresent()) {
                Vulnerability vulnerability = existingVulnerability.get();

                // Check if this user already has this vulnerability saved
                boolean alreadyExists = userVulnerabilityHistoryRepository
                    .existsByUserAndCveId(user, vulnerability.getCveId());

                if (!alreadyExists) {
                    // If not already saved, add to history
                    historyRecords.add(new UserVulnerabilityHistory(user, vulnerability));
                }
            }
        }

        if (!historyRecords.isEmpty()) {
            userVulnerabilityHistoryRepository.saveAll(historyRecords);
            return ResponseEntity.ok().body(Map.of("message", "New vulnerabilities saved successfully."));
        }

        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(Map.of("message", "No new vulnerabilities to save."));
    }



    @PostMapping(value = "/check", consumes = {"multipart/form-data"})
    public List<VulnerabilityDataResponse> checkVulnerabilities(
            @RequestPart("make") String make,
            @RequestPart("productName") String productName,
            @RequestPart("version") String version,
            @RequestPart(value = "keywords", required = false) String keywords,
            @RequestPart(value = "file", required = false) MultipartFile file) {
        
    		List<VulnerabilityDataResponse> fin=checkVulnerabilityService.getVulnerabilities(make, productName, version, keywords);
    		
    	return fin;
    }
    
    @GetMapping("/history/{username}")
    public ResponseEntity<List<Vulnerability>> getVulnerabilityHistory(@PathVariable String username) {
        List<UserVulnerabilityHistory> historyList = userVulnerabilityHistoryRepository.findByUser_Username(username);
        
        if (historyList.isEmpty()) {
            return ResponseEntity.noContent().build();
        }
        
        List<Vulnerability> vulnerabilities = historyList.stream()
                .map(UserVulnerabilityHistory::getVulnerability)
                .collect(Collectors.toList());
        
        return ResponseEntity.ok(vulnerabilities);
    }
    
    @DeleteMapping("/history/delete")
    public ResponseEntity<String> deleteSelectedVulnerabilities(@RequestBody List<String> cveIds, @RequestParam String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new IllegalArgumentException("User not found"));

        List<UserVulnerabilityHistory> recordsToDelete = userVulnerabilityHistoryRepository
                .findByUserAndVulnerabilityCveIdIn(user, cveIds);

        if (!recordsToDelete.isEmpty()) {
            userVulnerabilityHistoryRepository.deleteAll(recordsToDelete);
            return ResponseEntity.ok("Selected vulnerabilities deleted successfully.");
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("No matching vulnerabilities found for deletion.");
        }
    }

}