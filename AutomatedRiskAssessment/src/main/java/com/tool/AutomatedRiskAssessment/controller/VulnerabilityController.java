package com.tool.AutomatedRiskAssessment.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.tool.AutomatedRiskAssessment.dto.CheckVulnerabilitiesRequest;
import com.tool.AutomatedRiskAssessment.dto.LoginRequest;
import com.tool.AutomatedRiskAssessment.dto.VulnerabilityDTO;
import com.tool.AutomatedRiskAssessment.dto.VulnerabilityDataResponse;
import com.tool.AutomatedRiskAssessment.service.CheckVulnerabilityService;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/vulnerabilities")
public class VulnerabilityController {
	
	@Autowired
	CheckVulnerabilityService checkVulnerabilityService;

	@PostMapping(value = "/check", consumes = {"multipart/form-data"})
    public List<VulnerabilityDTO> validateUser(
            @RequestPart("make") String make,
            @RequestPart("productName") String productName,
            @RequestPart("version") String version,
            @RequestPart(value = "file", required = false) MultipartFile file) {
        
		System.out.println("Software Name: " + make);
        System.out.println("Version: " + productName);
        System.out.println("CVE: " + version);

        if (file != null && !file.isEmpty()) {
            System.out.println("Uploaded File Name: " + file.getOriginalFilename());
        } else {
            System.out.println("No file uploaded.");
        }

//        // Create a list of dummy vulnerability data
//        List<VulnerabilityDataResponse> responseList = new ArrayList<>();
//        for (int i = 1; i <= 10; i++) {
//            VulnerabilityDataResponse response = new VulnerabilityDataResponse();
//            response.setSoftwareName(softwareName + " Example " + i);
//            response.setVersion(version);
//            response.setCveId(cve + "-000" + i);
//            response.setSeverity(i % 2 == 0 ? "High" : "Medium");
//            response.setMitigation("Apply patch " + i + " or update software.");
//            response.setResourceLink("https://vulnerability.example.com/cve-" + i);
//            responseList.add(response);
//        }

        // Return the dummy data as JSON
        return checkVulnerabilityService.getVulnerabilities(make, productName, version);
    }
}
