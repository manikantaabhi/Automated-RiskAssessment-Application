package com.tool.AutomatedRiskAssessment.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import com.tool.AutomatedRiskAssessment.dto.VulnerabilityDataResponse;
import com.tool.AutomatedRiskAssessment.dto.VulnerabilitySaveRequestDTO;
import com.tool.AutomatedRiskAssessment.model.*;
import com.tool.AutomatedRiskAssessment.repo.*;
import com.tool.AutomatedRiskAssessment.service.CheckVulnerabilityService;
import com.tool.AutomatedRiskAssessment.service.EmailService;
import com.tool.AutomatedRiskAssessment.service.ReportService;
import com.tool.AutomatedRiskAssessment.service.ReportVulnerabilityService;
import com.tool.AutomatedRiskAssessment.service.VulnerabilityService;
import com.tool.AutomatedRiskAssessment.service.MitigationService;
import com.tool.AutomatedRiskAssessment.service.ProductUploadService;

import java.util.*;
import java.util.stream.Collectors;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/vulnerabilities")
public class VulnerabilityController {
	
	
	@Autowired
	VulnerabilityService vulnerabiltyservice;
	
	
    @Autowired
    private EmailService emailService;

    @Autowired
    private ReportService reportService;
	

    
    @Autowired
    private CheckVulnerabilityService checkVulnerabilityService;
    
    @Autowired
    private MitigationService mitigationService;
    
    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private VulnerabilityRepository vulnerabilityRepository;
    
    @Autowired
    private UserVulnerabilityHistoryRepository userVulnerabilityHistoryRepository;
    
    @Autowired
    private MitigationRepository mitigationRepository;
    
    @Autowired
    private ProductUploadService uploadService;

    @PostMapping("/save-vulnerabilities")
    public ResponseEntity<Map<String, String>> saveVulnerabilities(@RequestBody VulnerabilitySaveRequestDTO request) {
        System.out.println(request);
        String username = request.getUsername();
        
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new IllegalArgumentException("User not found"));

        List<String> cveIds = request.getCveId();
        List<UserVulnerabilityHistory> historyRecords = new ArrayList<>();

        for (String cveId : cveIds) {
            Optional<Vulnerability> existingVulnerability = vulnerabilityRepository.findByCveId(cveId);
            
            if (existingVulnerability.isPresent()) {
                Vulnerability vulnerability = existingVulnerability.get();

                // Check if this user already has this vulnerability saved
                boolean alreadyExists = userVulnerabilityHistoryRepository
                    .existsByUserAndCveId(user, vulnerability.getCveId());

                if (!alreadyExists) {
                    // If not already saved, add to history
                    historyRecords.add(new UserVulnerabilityHistory(user, vulnerability));
                }
            }
        }

        if (!historyRecords.isEmpty()) {
            userVulnerabilityHistoryRepository.saveAll(historyRecords);
            return ResponseEntity.ok().body(Map.of("message", "New vulnerabilities saved successfully."));
        }

        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(Map.of("message", "No new vulnerabilities to save."));
    }


    @PostMapping(value = "/uplodProducts", consumes = {"multipart/form-data"})
    public void uploadProducts(@RequestPart(value = "file") MultipartFile file)
    {
    	
    }


	@PostMapping(value = "/check", consumes = {"multipart/form-data"})
    public List<VulnerabilityDataResponse> validateUser(
            @RequestPart(value="make", required=false) String make,
            @RequestPart(value="productName", required=false) String productName,
            @RequestPart(value="version", required=false) String version,
            @RequestPart(value="keywords", required=false) String keywords,
            @RequestPart(value = "file", required = false) MultipartFile file) {
        
		System.out.println("Software Name: " + make);
        System.out.println("Version: " + productName);
        System.out.println("CVE: " + version);
        
       

//        // Create a list of dummy vulnerability data
//        List<VulnerabilityDataResponse> responseList = new ArrayList<>();
//        for (int i = 1; i <= 10; i++) {
//            VulnerabilityDataResponse response = new VulnerabilityDataResponse();
//            response.setSoftwareName(softwareName + " Example " + i);
//            response.setVersion(version);
//            response.setCveId(cve + "-000" + i);
//            response.setSeverity(i % 2 == 0 ? "High" : "Medium");
//            response.setMitigation("Apply patch " + i + " or update software.");
//            response.setResourceLink("https://vulnerability.example.com/cve-" + i);
//            responseList.add(response);
//        }
        List<String[]> parsedData = vulnerabiltyservice.parseCsvFile(file);

        
        for (String[] row : parsedData) {
            System.out.println(String.join(", ", row));  // Display CSV content
        }


        // Return the dummy data as JSON
        return checkVulnerabilityService.getVulnerabilities(make, productName, version, keywords);
	}
//	}
//    @PostMapping(value = "/check", consumes = {"multipart/form-data"})
//    public List<VulnerabilityDataResponse> checkVulnerabilities(
//            @RequestPart("make") String make,
//            @RequestPart("productName") String productName,
//            @RequestPart("version") String version,
//            @RequestPart(value = "keywords", required = false) String keywords,
//            @RequestPart(value = "file", required = false) MultipartFile file) {
//        
//    		List<VulnerabilityDataResponse> fin=checkVulnerabilityService.getVulnerabilities(make, productName, version, keywords);
//    		
//    	return fin;
//    }
    
    @GetMapping("/history/{username}")
    public ResponseEntity<List<Vulnerability>> getVulnerabilityHistory(@PathVariable String username) {
        List<UserVulnerabilityHistory> historyList = userVulnerabilityHistoryRepository.findByUser_Username(username);
        
        if (historyList.isEmpty()) {
            return ResponseEntity.noContent().build();
        }
        
        List<Vulnerability> vulnerabilities = historyList.stream()
                .map(UserVulnerabilityHistory::getVulnerability)
                .collect(Collectors.toList());
        
        return ResponseEntity.ok(vulnerabilities);
    }
    
    @DeleteMapping("/history/delete")
    public ResponseEntity<String> deleteSelectedVulnerabilities(@RequestBody List<String> cveIds, @RequestParam String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new IllegalArgumentException("User not found"));

        List<UserVulnerabilityHistory> recordsToDelete = userVulnerabilityHistoryRepository
                .findByUserAndVulnerabilityCveIdIn(user, cveIds);

        if (!recordsToDelete.isEmpty()) {
            userVulnerabilityHistoryRepository.deleteAll(recordsToDelete);
            return ResponseEntity.ok("Selected vulnerabilities deleted successfully.");
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("No matching vulnerabilities found for deletion.");
        }
    }
    
    @GetMapping("/mitigations/{cveId}")
    public ResponseEntity<String> getMitigation(@PathVariable String cveId) {
        Mitigation mitigation = mitigationRepository.findByCveId(cveId);
        
        if (mitigation == null) {
//            return ResponseEntity.noContent().build();
        	return ResponseEntity.ok(mitigationService.processVulnerabilities(cveId));
        }
        return ResponseEntity.ok(mitigation.getMitigationText());
    }
    
    @PostMapping("/excel")
    public ResponseEntity<Map<String, String>> uploadExcel(@RequestParam("file") MultipartFile file,
                                                           @RequestParam("username") String username) {
        System.out.println(username + " " + file);
        try {
            List<OrganizationProducts> list= uploadService.processExcelFile(file, username);
            if(list.size()>0) {
	            Map<String, String> response = new HashMap<>();
	            response.put("message", "Excel file uploaded and processed successfully.");
	            return ResponseEntity.ok(response);
            }
            else
            {
            	Map<String, String> error = new HashMap<>();
                error.put("error", "No new Products added");
                return ResponseEntity.status(500).body(error);
            }
        } catch (Exception e) {
            Map<String, String> error = new HashMap<>();
            error.put("error", "Failed to process file: " + e.getMessage());
            return ResponseEntity.status(500).body(error);
        }
    }
	
	@GetMapping("/send-report")
    public ResponseEntity<String> sendReportToEmail(@RequestParam String email) {
        try {
            byte[] excelData = reportService.generateExcel();
            emailService.sendExcelReport(email, excelData);
            return ResponseEntity.ok("Excel report sent successfully to " + email);
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error sending report: " + e.getMessage());
        }
    }
	
	@Autowired
    private ReportVulnerabilityService reportVulnerabilityService;

    @PostMapping(value = "/report", consumes = {"multipart/form-data"})
    public ResponseEntity<Map<String, Object>> validateUser(
            @RequestPart(value = "make", required = false) String make,
            @RequestPart(value = "productName", required = false) String product,
            @RequestPart(value = "version", required = false) String version,
            @RequestPart(value = "type", required = false) String type,
            @RequestPart("fromDate") String fromDate,
            @RequestPart("toDate") String toDate,
            @RequestPart(value = "file", required = false) MultipartFile file) {

        Map<String, Object> response = reportVulnerabilityService.processWithDateFilter(
            make, product, version, type, fromDate, toDate, file);
        return ResponseEntity.ok(response); // ✅ match type
    }



}