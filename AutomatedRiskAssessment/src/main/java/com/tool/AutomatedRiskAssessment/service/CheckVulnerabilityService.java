package com.tool.AutomatedRiskAssessment.service;

import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import com.tool.AutomatedRiskAssessment.dto.VulnerabilityDTO;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Service
public class CheckVulnerabilityService {
    private final RestTemplate restTemplate = new RestTemplate();
    private static final String NVD_API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0";

    public List<VulnerabilityDTO> getVulnerabilities(String company, String product, String version, String keywords) {
        // Construct the CPE Name dynamically
        String cpeName = String.format("cpe:2.3:o:%s:%s:%s:*:*:*:*:*:*:*", 
                                        company, product, version);

        if(keywords==null)
        	keywords="";
        // Build the complete URL with the CPE name
        String url = NVD_API_URL.concat("?cpeName=").concat(cpeName).concat("&keywordSearch=").concat(keywords);

        // Fetch response from NVD API
        Map<String, Object> response = restTemplate.getForObject(url, Map.class);
        if (response == null || !response.containsKey("vulnerabilities")) {
            return new ArrayList<>();
        }
        List<Map<String, Object>> cveItems = (List<Map<String, Object>>) response.get("vulnerabilities");
        List<VulnerabilityDTO> vulnerabilities = new ArrayList<>();
        //System.out.println(cveItems);
        for (Map<String, Object> cveItem : cveItems) {
            Map<String, Object> cveData = (Map<String, Object>) cveItem.get("cve");
            String cveId = (String) cveData.get("id");
            //System.out.println(cveId);
            // Extract description
            List<Map<String, Object>> descriptions = (List<Map<String, Object>>) cveData.get("descriptions");
            String description = descriptions != null && !descriptions.isEmpty() ?
                    (String) descriptions.get(0).get("value") : "No description available";
            //System.out.println(description);
            // Extract CVSS (severity & score)
            double baseScore = 0.0;
            String severity = "UNKNOWN";
            if (cveData.containsKey("metrics")) {
                Map<String, Object> metrics = (Map<String, Object>) cveData.get("metrics");
                if (metrics.containsKey("cvssMetricV31")) {
                    Map<String, Object> cvssV3 = (Map<String, Object>) ((List<Map<String, Object>>) metrics.get("cvssMetricV31")).get(0).get("cvssData");
                    baseScore = (double) cvssV3.get("baseScore");
                    severity = (String) cvssV3.get("baseSeverity");
                }
            }

            // Extract references
            List<String> references = new ArrayList<>();
           
            if (cveData.containsKey("references")) {
                List<Map<String, Object>> referenceData = (List<Map<String, Object>>) cveData.get("references");
                for (Map<String, Object> ref : referenceData) {
                    references.add((String) ref.get("url"));
                }
                //System.out.println(references);
            }

            // Create and add DTO object
            vulnerabilities.add(new VulnerabilityDTO(company, version, cveId, description, baseScore, severity, references));
        }

        return vulnerabilities;
    }
}
